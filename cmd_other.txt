https://artisan.page/

php artisan list

Authentication:
composer require laravel/ui

Generate Basic Scaffolding & with Authentication Using Bootstrap:
php artisan ui bootstrap $ php artisan ui bootstrap --auth

Generate Basic Scaffolding & with Authentication Using Vue:
$ php artisan ui vue $ php artisan ui vue --auth

Generate Basic Scaffolding & with Authentication Using React:
$ php artisan ui react $ php artisan ui react --auth

=-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-=

Generate a New Controller:
php artisan make:controller InvoicesController
php artisan make:controller InvoicesController --resource

=-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-=

Create a Invoice model
php artisan make:model Invoice -mcr

This command will create a Invoice model with the following files:
app/Models/Invoice.php
database/migrations/2023_03_25_000000_create_invoices_table.php
app/Http/Controllers/InvoiceController.php
routes/web.php

=-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-=
php artisan list make

php artisan config:cache  

php artisan make:model

php artisan migrate

php artisan --version


laravel new example-app --git
laravel new example-app --git --branch="main"
git branch
git log

php artisan down --secret="5983-4gzq-d83957"
php artisan down --redirect="coming_soon"
php artisan down --render="errors::503"
php artisan down --render="503"
php artisan down --refresh=5
php artisan up

php artisan storage:link 


php artisan route:list
php artisan r:l --except-vendor

php artisan make:command CreateUserCommand

php artisan make:middleware IsAdmin

Naming Conventions in Laravel:
------------------------------
PascalCase: MyControllerName , MyModelName, MyClassName
camelCase: myMethodName ,myVariableName
snake_case: my_function_name, my_route_name, my_view_name
MY_CONSTANT

Class names: Class names should be declared in StudlyCaps (also known as CamelCase) style,
with the first letter of each word capitalized, without underscores,and with no prefixes.
For example: MyClassName.

Method names: Method names should be declared in camelCase style,
with the first letter of the first word in lowercase
and the first letter of each subsequent word capitalized,
without underscores.
For example: myMethodName.

Constant names: Constant names should be declared in all uppercase letters
with underscores separating words.
For example: MY_CONSTANT.

Variable names: Variable names should be declared in camelCase style,
with the first letter of the first word in lowercase
and the first letter of each subsequent word capitalized, without underscores.
For example: myVariableName.

Function names: Function names should be declared in snake_case style,
with all letters in lowercase and underscores separating words.
For example: my_function_name.

Route names: Route names should be declared in snake_case style,
with all letters in lowercase and underscores separating words.
For example: my_route_name.

View names: View names should be declared in snake_case style,
with all letters in lowercase and underscores separating words.
For example: my_view_name.blade.php.

Controller names: Controller names should be declared in plural form,
with the first letter of each word capitalized, without underscores,
and with the word "Controller" added to the end. 
For example: MyControllerName.

Model names: Model names should be declared in singular form, 
with the first letter of each word capitalized, without underscores. 
For example: MyModelName.


=-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-= =-=-=-=

User Roles and Permissions:

Laratrust:
Pros:
    Easy to use and understand.
    Provides a lot of features out of the box.
    Good documentation.
Cons:
    Can be slow for large applications.
    Limited customization options.
    
Spatie Permissions:
Pros:
    Lightweight and fast.
    Highly customizable.
    Good documentation.
Cons:
    Requires more setup and configuration than Laratrust.
    Some features may require additional packages.

https://medium.com/@miladev95/step-by-step-guide-to-user-role-and-permission-tutorial-in-laravel-10-1fecdabfdea0
https://medium.com/@codeaxion77/supercharge-your-laravel-app-with-spatie-roles-and-permissions-f20fe02a8c75